import java.util.Iterator;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.InputProcessor;

public class GameScreen implements Screen, InputProcessor {
    final Climbers game;

    Texture exampleBlock;
    Texture popoImage;
    
    Rectangle popo;
    OrthographicCamera camera;
    Array<Rectangle> blocks;
    ShapeRenderer renderer;
    float x;
    float y;

    public GameScreen(final Climbers gam) {
        this.game = gam;

        // load the images for the droplet and the bucket, 64x64 pixels each
        exampleBlock = new Texture(Gdx.files.internal("GreenBlock.png"));
        popoImage = new Texture(Gdx.files.internal("Popo.png"));


        // create the camera and the SpriteBatch
        camera = new OrthographicCamera();
        camera.setToOrtho(false, 800, 480);


        popo = new Rectangle();
        popo.x = 240;
        popo.y = 400;
        popo.width = 12;
        popo.height = 20;
        // create the raindrops array and spawn the first raindrop
        
        blocks = new Array<Rectangle>();
        spawnBlock(100, 100);
        renderer = new ShapeRenderer();

        Gdx.input.setInputProcessor(this);
    }

    private void spawnBlock(int x, int y)
    {
        Rectangle block = new Rectangle();
        block.x = x;
        block.y = y;
        block.width = 64;
        block.height = 64;
        blocks.add(block);
    }
    

    @Override
    public void render(float delta) {
        // clear the screen with a dark blue color. The
        // arguments to glClearColor are the red, green
        // blue and alpha component in the range [0,1]
        // of the color to be used to clear the screen.
        Gdx.gl.glClearColor(0, 0, 0, 0);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // tell the camera to update its matrices.
        camera.update();

        // tell the SpriteBatch to render in the
        // coordinate system specified by the camera.
        game.batch.setProjectionMatrix(camera.combined);

        // begin a new batch and draw the bucket and
        // all drops
        game.batch.begin();
        
        for (Rectangle block : blocks) {
            game.batch.draw(exampleBlock, block.x, block.y);
        }
        game.batch.draw(popoImage, popo.x, popo.y);
        game.batch.end();

        


    }

    @Override
    public void resize(int width, int height) 
    {
    }

    @Override
    public void show() {

    }

    @Override
    public void hide() {
    }

    @Override
    public void pause() {
    }

    @Override
    public void resume() {
    }

    @Override
    public void dispose() {
        exampleBlock.dispose();
    }

    public boolean keyDown (int keycode) 
    {
        return false;
    }

    public boolean keyUp (int keycode) 
    {
        return false;
    }

    public boolean keyTyped (char character) 
    {
        return false;
    }

    public boolean touchDown (int x, int y, int pointer, int button) 
    {
        return false;
    }

    public boolean touchUp (int x, int y, int pointer, int button) 
    {
        return false;
    }

    public boolean touchDragged (int screenX, int screenY, int pointer)
    {
     
        return false;

    }

    public boolean mouseMoved (int x, int y)
    {
        return false;
    }

    public boolean scrolled (int amount)
    {
        return false;
    }
}

