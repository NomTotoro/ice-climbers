import java.util.Iterator;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.InputProcessor;

public class GameScreen implements Screen, InputProcessor {
    final Climbers game;

    Texture exampleBlock;
    private TmxMapLoader maploader;
    private TiledMap map; 
    private OrthogonalTiledmapRenderer renderer;
    Player p1;
    OrthographicCamera camera;
    Array<Rectangle> blocks;
    ShapeRenderer renderer;
    float x;
    float y;
    
    final int gravity = 3;
    final int velocity = 3;
    
    final int origFall = 20;
    int fall;
    
    static boolean keyLeft;
    static boolean keyRight;

    public GameScreen(final Climbers gam) {
        this.game = gam;

        // load the images for the droplet and the bucket, 64x64 pixels each
        exampleBlock = new Texture(Gdx.files.internal("GreenBlock.png"));


        // create the camera and the SpriteBatch
        camera = new OrthographicCamera();
        camera.setToOrtho(false, 800, 480);

        p1 = new Player();

        // create the raindrops array and spawn the first raindrop
        
        blocks = new Array<Rectangle>();
        spawnBlock(100, 100);
        renderer = new ShapeRenderer();
        
        fall = origFall;

        Gdx.input.setInputProcessor(this);
        maploader = new TmxMapLoader();
        map= maploader.load("IceClimbersBackground.tmx");
        renderer2= new OrthogonalTiledMapRenderer(map);
camera.position.set(800 / 2, 480 / 2, 0);    }

    private void spawnBlock(int x, int y)
    {
        Rectangle block = new Rectangle();
        block.x = x;
        block.y = y;
        block.width = 64;
        block.height = 64;
        blocks.add(block);
    }
    
    public void handleInput(float dt){
        if(Gdx.input.isTouched())
        camera.position.x += 100 * dt;
    }
    
    public void update(float dt){
        handleInput(dt);
        camera.update();
    }
    
    @Override
    public void render(float delta) {
        // clear the screen with a dark blue color. The
        // arguments to glClearColor are the red, green
        // blue and alpha component in the range [0,1]
        // of the color to be used to clear the screen.
        Gdx.gl.glClearColor(0, 0, 0, 0);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // tell the camera to update its matrices.
        camera.update();

        // tell the SpriteBatch to render in the
        // coordinate system specified by the camera.
        game.batch.setProjectionMatrix(camera.combined);

        // begin a new batch and draw the bucket and
        // all drops
        game.batch.begin();
        
        for (Rectangle block : blocks) {
            game.batch.draw(exampleBlock, block.x, block.y);
        }
        game.batch.draw(p1.popoImage, p1.popo.x, p1.popo.y);
        game.batch.end();

        move(delta);
        fall();
        inAir();

    }
    
    private void move(float delta)
    {
        if (keyLeft)
        {
            p1.popo.x -= velocity;
        }
        
        if (keyRight)
        {
            p1.popo.x += velocity;
        }
        
        if (p1.jump)
        {
            p1.popo.y += 10;
        }
    }
    
    private void fall()
    {
        if (p1.popo.y <= p1.popo.height)
        {
            p1.popo.y = p1.popo.height;
            //p1.upAir = false;
            p1.downAir = false;
            //System.out.println("hi");
        }
        else
        {
            p1.jump = false;
            //p1.downAir = true;
        }
        
        System.out.println(p1.upAir);
        
        if (p1.upAir)
        {
            p1.popo.y += fall;
            fall--;
            
            if (fall <= 0)
            {
                p1.upAir = false;
                p1.downAir = true;
                fall = 0;
            }
        }
        
        if (p1.downAir)
        {
            p1.popo.y += fall;
            fall -= 1;
            
            if (p1.popo.y < p1.popo.height)
            {
                p1.popo.y = p1.popo.height;
                //p1.upAir = false;
                p1.downAir = false;
                fall = origFall;
            }
        }
        
        p1.popo.y -= gravity;
    }

    private void inAir()
    {
        if (p1.downAir && p1.popo.y <= p1.popo.height + 1)
        {
            //p1.upAir = false;
            //p1.downAir = false;
        }
        else
        {
        }
    }

    @Override
    public void resize(int width, int height) 
    {
    }

    @Override
    public void show() {

    }

    @Override
    public void hide() {
    }

    @Override
    public void pause() {
    }

    @Override
    public void resume() {
    }

    @Override
    public void dispose() {
        exampleBlock.dispose();
    }

    public boolean keyDown (int keycode) 
    {
        p1.keyDown(keycode);   
        return true;
    }

    public boolean keyUp (int keycode) 
    {
        p1.keyUp(keycode);
        return true;
    }

    public boolean keyTyped (char character) 
    {
        return false;
    }

    public boolean touchDown (int x, int y, int pointer, int button) 
    {
        return false;
    }

    public boolean touchUp (int x, int y, int pointer, int button) 
    {
        return false;
    }

    public boolean touchDragged (int screenX, int screenY, int pointer)
    {
     
        return false;

    }

    public boolean mouseMoved (int x, int y)
    {
        return false;
    }

    public boolean scrolled (int amount)
    {
        return false;
    }
}

